@using Microsoft.EntityFrameworkCore
@using WatchList.Core.Model
@using WatchList.Core.Model.ItemCinema.Components
@using WatchList.Core.Model.Load
@using WatchList.Core.Model.Load.ItemActions
@using WatchList.Core.Model.Load.Components

<MudDialog>

    <DialogContent>

        <MudCheckBox T="bool" Value="_isDeleteGrade" Style="font-size:14px" Color="Color.Surface">
            Delete existing grade (Set Status "Planned Watch")
        </MudCheckBox>

        <MudSpacer />

        <div class="d-flex align-start justify-space-start">

            <MudCheckBox T="bool" @bind-Value="_isConsiderDuplicates" Style="font-size:14px" Color="Color.Surface" Class="mr-3">
                Consider duplicates
            </MudCheckBox>

            @if (_isConsiderDuplicates)
            {
                 <MudToggleGroup T="DuplicateLoadingRules" SelectionMode="SelectionMode.MultiSelection" @bind-Values="_actionDuplicateItems" Color="Color.Surface" CheckMark FixedContent>
                 <MudToggleItem Value=DuplicateLoadingRules.CaseSensitive UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" Style="font-size:12px"/>
                 <MudToggleItem Value=DuplicateLoadingRules.UpdateDuplicate UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" Style="font-size:12px"/>
             </MudToggleGroup>
            }

        </div>


        <div class="d-flex align-start">

            <MudSelect T="TypeCinemaModel" Label="Type" @bind-Value="_selectTypeCinema" AdornmentIcon="@Icons.Material.Filled.ShortText" Style="width:200px" Class="mr-2">
                @foreach (var item in TypeCinemaModel.GetItemsType)
                {
                    <MudSelectItem T="TypeCinemaModel" Value="@item" />
                }
            </MudSelect>

            <MudSelect T="Grade" Label="Grade" @bind-Value="_selectGrade" AdornmentIcon="@Icons.Material.Filled.ShortText">
                @foreach (var item in Grade.List.OrderBy(x => x.Value))
                {
                    <MudSelectItem T="Grade" Value="@item" />
                }
            </MudSelect>
            
        </div>

        <MudGrid Justify="Justify.FlexEnd" Class="mt-2">

            <MudItem>
                <MudFileUpload T="IBrowserFile" Accept=".db" FilesChanged="UploadData" Style="align-items:end;">
                    <ActivatorContent>
                        <MudButton HtmlTag="label" Style="max-width: 60px; max-height : 30px;" Variant="Variant.Filled" title="Import Data">Ok</MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </MudItem>
            <MudItem>
                <MudButton OnClick="Close" Style="max-width: 60px; max-height : 30px;" Variant="Variant.Filled" title="Cancel">Cancel</MudButton>
            </MudItem>

        </MudGrid>

        
    </DialogContent>

</MudDialog>